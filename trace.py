#! /usr/bin/env python2

# Developed by Olivia Lucca Fraser
# for Tenable Network Security

from sys import argv
import argparse

def step(row):
    call_or_ret=row.split(" ")[0]
    if (call_or_ret == "call"):
        return 1
    elif (call_or_ret == "ret"):
        return -1
    else:
        return 0

def frame(row):
    return row.split(" ")[1].split("(")[0]

def prettify_trace (filename, depth, focus):
    tracerows=[r.split("(TRACE) ")[1] for r in open(filename).readlines()]
    indent=0
    frame_stack=[]
    r=""
    for row in tracerows:
        s = step(row)
        if (s == 1):
            frame_stack.append(frame(row))
        elif (s == -1):
            r = frame_stack.pop()
        if ((depth == 0 or depth >= indent) and (focus == "" or (focus in [r]+frame_stack))):
            print ("  "*max(0,indent))+row[:-1],
            if (s == -1):
                print "from "+r
                r=""
            else:
                print
        indent += s

def main ():
    tracefile=""
    depth=0
    function=""
    parser = argparse.ArgumentParser(description =
                                     "Reconstruct call stack from nasl -T"+
                                     " trace, and structure trace output "+
                                     " accordingly.")
    parser.add_argument("tracefile", type=str, nargs=1, 
                        help="the output file generated by nasl -T")
    parser.add_argument("--depth", "-d", metavar="<calls deep>", type=int,
                        nargs=1, help="how deep to peer into the call"+
                        " stack, in absolute terms")
    parser.add_argument("--function", "-f", metavar="<function name>",
                        type=str,
                        nargs=1, help="if you would like to restrict the"+
                        " view to just one function, name it")
    if (len(argv) > 1):
        parser.parse_args(argv)
        prettify_trace(tracefile, depth, function)
    else:
        parser.parse_args(["-h"])
        exit()

if __name__ == "__main__":
    main()


# if (len(argv) < 2):
#     print "Usage: "+argv[0]+" <tracefile> [depth to inspect] [function of interest]"
# else:
#     depth=0
#     focus=""
#     if (len(argv) > 2):
#         depth = int(argv[2])
#     if (len(argv) > 3):
#         focus = argv[3]
#     prettify_trace(argv[1], depth, focus)
